{"version":3,"sources":["apis/auth/auth.api.ts","components/navbar/Navbar.tsx","components/global-modals/login/login-modal.actions.js","components/breadcrumbs/Breadcrumbs.tsx","components/global-modals/login/Login.tsx","components/global-modals/GlobalModals.tsx","components/home/Home.tsx","components/get-help/GetHelp.tsx","components/volunteer/Volunteer.tsx","components/manage-requests/manage-request-page/create-requests/CreateRequests.tsx","components/manage-requests/manage-request-page/request-table-list/RequestTableList.tsx","components/manage-requests/manage-request-page/ManageRequests.tsx","components/navbar/nav-manager.ts","components/manage-requests/create-request-page/CreateRequestPage.tsx","components/root/AppRoot.tsx","components/global-modals/login/login-modal.reducers.ts","apis/auth/auth.reducers.ts","store/index.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["activeAccount","AppNavbar","this","props","hasLogin","openLoginModal","bg","expand","Brand","as","NavLink","to","Toggle","aria-controls","Collapse","id","Nav","className","Fragment","Link","Form","inline","Button","onClick","variant","Component","connect","state","auth","type","AppBreadcrumb","goTo","showBreadcrumbs","params","Breadcrumb","_","map","value","idx","isLastElement","length","Item","active","key","withRouter","omitBy","match","isUndefined","size","values","history","push","fakeUserList","isLogin","delayPromise","ms","Promise","resolve","setTimeout","LoginModal","setState","hasError","isLoading","event","username","target","password","console","log","then","Math","random","reject","errorMessage","find","hideLoginModal","onLogin","bind","catch","error","finally","show","Modal","onHide","dialogClassName","animation","aria-labelledby","centered","Header","closeButton","Title","Body","Alert","Group","controlId","Label","Control","disabled","placeholder","onChange","handleUsernameChange","handlePasswordChange","Footer","login","Spinner","role","aria-hidden","globalModals","GlobalModals","Home","GetHelp","Volunteer","Jumbotron","RequestTableList","Table","striped","bordered","hover","MyRequests","CreateRequests","PUBLIC_NAV_STATE","home","volunteer","PROTECTED_NAV_STATE","getDisplayComponentForNav","navId","subNavId","navState","defaultTo","component","navManager","path","loginModalReducers","action","newState","authReducers","appReducers","combineReducers","store","createStore","applyMiddleware","logger","App","AppRoot","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.5de1979e.chunk.js","sourcesContent":["import _ from 'lodash';\nimport { Account } from '../../dto/account/account';\n\nconst fakeUserList: Account[] = [];\nlet isLogin: boolean = false;\nlet activeAccount: Account;\n\nexport function createAccount({ password, username }): Promise<Account> {\n  if (!isLogin) {\n    return delayPromise(2000).then(() => {\n      if (Math.random() > 0.8) {\n        return Promise.reject({\n          errorMessage: 'Fails to create account',\n        });\n      }\n\n      isLogin = true;\n      activeAccount = new Account({\n        username,\n        password,\n      });\n      fakeUserList.push(activeAccount);\n      return activeAccount;\n    });\n  }\n\n  return Promise.resolve(activeAccount);\n}\n\nexport function login({ username, password }): Promise<Account> {\n  console.log('Requesting to login', username, password);\n  if (!isLogin) {\n    return delayPromise(2000).then(() => {\n      if (Math.random() > 0.8) {\n        return Promise.reject({\n          errorMessage: 'Fails to log in',\n        });\n      }\n      isLogin = true;\n      activeAccount = _.find(fakeUserList, { username });\n      console.log('Successfully loggin in');\n      return activeAccount;\n    });\n  }\n\n  return Promise.resolve(activeAccount);\n}\n\nfunction delayPromise(ms) {\n  return new Promise((resolve) => setTimeout(resolve, ms));\n}\n","import React, { Component } from 'react';\n\nimport './Navbar.css';\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\nimport Nav from 'react-bootstrap/Nav';\nimport Navbar from 'react-bootstrap/Navbar';\nimport { NavLink } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { openLoginModal } from '../global-modals/login/login-modal.actions';\n\ninterface ILoginModalProps {\n  hasLogin?: boolean;\n  openLoginModal?(): any;\n}\n\nclass AppNavbar extends Component<ILoginModalProps> {\n  render() {\n    const { hasLogin, openLoginModal } = this.props;\n    return (\n      <Navbar bg=\"light\" expand=\"lg\">\n        <Navbar.Brand as={NavLink} to=\"/\">\n          COVID-19 Mutual Aid\n        </Navbar.Brand>\n        <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n        <Navbar.Collapse id=\"basic-navbar-nav\">\n          <Nav className=\"mr-auto\">\n            {!hasLogin && (\n              <React.Fragment>\n                <Nav.Link as={NavLink} to=\"/\">\n                  Home\n                </Nav.Link>\n                <Nav.Link as={NavLink} to=\"/get-help\">\n                  Get help\n                </Nav.Link>\n                <Nav.Link as={NavLink} to=\"/volunteer\">\n                  Get involved\n                </Nav.Link>\n              </React.Fragment>\n            )}\n\n            {hasLogin && (\n              <Nav.Link as={NavLink} to=\"/my-requests\">\n                Manage requests\n              </Nav.Link>\n            )}\n          </Nav>\n        </Navbar.Collapse>\n        <Form inline>\n          {!hasLogin && (\n            <Button\n              className=\"LoginButton\"\n              onClick={openLoginModal}\n              variant=\"outline-secondary\"\n            >\n              Login\n            </Button>\n          )}\n\n          {hasLogin && <div className=\"LoginButton\">Welcome back!</div>}\n\n          <Button variant=\"info\">Donate</Button>\n        </Form>\n      </Navbar>\n    );\n  }\n}\n\nconst mapStateToProps = (state, props) => {\n  return {\n    hasLogin: state.auth.hasLogin || false,\n  };\n};\n\nexport default connect(mapStateToProps, {\n  openLoginModal,\n})(AppNavbar);\n","export const openLoginModal = () => ({\n  type: 'OPEN_LOGIN_MODAL',\n});\n\nexport const hideLoginModal = () => ({\n  type: 'HIDE_LOGIN_MODAL',\n});\n\nexport const onLogin = () => ({\n  type: 'SUCCESSFULLY_LOG_IN',\n});\n","import React, { Component } from 'react';\n\nimport _ from 'lodash';\nimport './Breadcrumbs.css';\nimport Breadcrumb from 'react-bootstrap/Breadcrumb';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router';\n\ninterface IAppBreadcrumb {\n  goTo(newRoute: string): any;\n  params: String[];\n  showBreadcrumbs?: boolean;\n}\n\nclass AppBreadcrumb extends Component<IAppBreadcrumb> {\n  render() {\n    const { goTo, showBreadcrumbs, params } = this.props;\n\n    return (\n      showBreadcrumbs && (\n        <Breadcrumb className=\"my-breadcrumb\">\n          {_.map(params, function (value, idx) {\n            const isLastElement = idx === params.length - 1;\n            return (\n              <Breadcrumb.Item\n                active={isLastElement}\n                onClick={() => {\n                  if (!isLastElement) {\n                    goTo('/' + value);\n                  }\n                }}\n                key={value}\n              >\n                {value}\n              </Breadcrumb.Item>\n            );\n          })}\n        </Breadcrumb>\n      )\n    );\n  }\n}\n\nconst mapStateToProps = (state, props) => {\n  const params = _.omitBy(props.match.params, _.isUndefined);\n  return {\n    showBreadcrumbs: _.size(params) > 1,\n    params: _.values(params),\n    goTo: props.history.push,\n  };\n};\n\nexport default withRouter(connect(mapStateToProps)(AppBreadcrumb));\n","import React, { Component } from 'react';\n\nimport './Login.css';\n\nimport { connect } from 'react-redux';\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\nimport Modal from 'react-bootstrap/Modal';\nimport Spinner from 'react-bootstrap/Spinner';\nimport { hideLoginModal, onLogin } from './login-modal.actions';\nimport Alert from 'react-bootstrap/Alert';\nimport * as auth from '../../../apis/auth/auth.api';\nimport { withRouter } from 'react-router';\n\ninterface ILoginModalProps {\n  show?: boolean;\n  goTo?(): any;\n  hideLoginModal?(): any;\n  onLogin?(): any;\n}\n\ninterface ILoginModalState {\n  hasError?: boolean;\n  isLoading?: boolean;\n  password?: string;\n  username?: string;\n}\n\nclass LoginModal extends Component<ILoginModalProps, ILoginModalState> {\n  componentDidMount() {\n    this.setState({\n      hasError: false,\n      isLoading: false,\n    });\n  }\n\n  handleUsernameChange(event) {\n    this.setState({\n      username: event.target.value,\n    });\n  }\n\n  handlePasswordChange(event) {\n    this.setState({\n      password: event.target.value,\n    });\n  }\n\n  login() {\n    this.setState({\n      hasError: false,\n      isLoading: true,\n    });\n\n    auth\n      .login({\n        password: this.state.password,\n        username: this.state.username,\n      })\n      .then(onSuccess.bind(this))\n      .catch((error) => {\n        this.setState({\n          hasError: true,\n          isLoading: false,\n        });\n      })\n      .finally(() => {\n        this.setState({\n          isLoading: false,\n        });\n      });\n\n    function onSuccess(this: any) {\n      this.props.hideLoginModal();\n      this.props.onLogin();\n      this.props.goTo('/my-requests');\n    }\n  }\n\n  render() {\n    if (this.props.show) {\n      const { show, hideLoginModal } = this.props;\n      return (\n        <Modal\n          show={show}\n          onHide={hideLoginModal}\n          dialogClassName=\"modal-50w\"\n          animation={false}\n          aria-labelledby=\"contained-modal-title-vcenter\"\n          centered\n        >\n          <Modal.Header closeButton>\n            <Modal.Title id=\"contained-modal-title-vcenter\">\n              Log in with your Username\n            </Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            {this.state.hasError && (\n              <Alert variant=\"danger\">Failed to login. Please retry!</Alert>\n            )}\n            <Form>\n              <Form.Group controlId=\"formBasicEmail\">\n                <Form.Label>Username</Form.Label>\n                <Form.Control\n                  disabled={this.state.isLoading}\n                  type=\"email\"\n                  placeholder=\"Enter username\"\n                  onChange={this.handleUsernameChange.bind(this)}\n                />\n              </Form.Group>\n              <Form.Group controlId=\"formBasicPassword\">\n                <Form.Label>Password</Form.Label>\n                <Form.Control\n                  disabled={this.state.isLoading}\n                  type=\"password\"\n                  placeholder=\"Password\"\n                  onChange={this.handlePasswordChange.bind(this)}\n                />\n              </Form.Group>\n            </Form>\n          </Modal.Body>\n          <Modal.Footer>\n            {!this.state.isLoading && (\n              <div>\n                <Button variant=\"outline-secondary\" onClick={hideLoginModal}>\n                  Cancel\n                </Button>\n                <Button variant=\"primary\" onClick={this.login.bind(this)}>\n                  Login\n                </Button>\n              </div>\n            )}\n\n            {this.state.isLoading && (\n              <Button variant=\"primary\" disabled>\n                <Spinner\n                  as=\"span\"\n                  animation=\"grow\"\n                  size=\"sm\"\n                  role=\"status\"\n                  aria-hidden=\"true\"\n                />\n                Loading...\n              </Button>\n            )}\n          </Modal.Footer>\n        </Modal>\n      );\n    }\n    return null;\n  }\n}\n\nconst mapStateToProps = (state, props) => {\n  return {\n    show: state.globalModals.show,\n    goTo: props.history.push,\n  };\n};\n\nexport default withRouter(\n  connect(mapStateToProps, {\n    hideLoginModal,\n    onLogin,\n  })(LoginModal)\n);\n","import React from 'react';\n\nimport LoginModal from './login/Login';\n\nconst GlobalModals = () => (\n  <div>\n    <LoginModal />\n  </div>\n);\n\nexport default GlobalModals;\n","import React from 'react';\n\nconst Home = () => <div>This is home</div>;\n\nexport default Home;\n","import React from 'react';\n\nconst GetHelp = () => <div>This is GetHelp</div>;\n\nexport default GetHelp;\n","import React from 'react';\n\nconst Volunteer = () => <div>This is volunteer</div>;\n\nexport default Volunteer;\n","import React from 'react';\n\nimport Button from 'react-bootstrap/Button';\nimport Jumbotron from 'react-bootstrap/Jumbotron';\nimport { withRouter } from 'react-router';\nimport { connect } from 'react-redux';\n\nconst RequestTableList = ({ goTo }) => (\n  <Jumbotron>\n    <h1>Hello!</h1>\n    <p>We are here to support you!</p>\n    <p>\n      <Button\n        onClick={() => goTo('/my-requests/create-request')}\n        variant=\"primary\"\n      >\n        Submit a request\n      </Button>\n    </p>\n  </Jumbotron>\n);\n\nconst mapStateToProps = (state, props) => {\n  return {\n    goTo: props.history.push,\n  };\n};\n\nexport default withRouter(connect(mapStateToProps)(RequestTableList));\n","import React from 'react';\n\nimport Table from 'react-bootstrap/Table';\n\nconst RequestTableList = () => (\n  <React.Fragment>\n    <h3>Requests</h3>\n    <Table striped bordered hover size=\"sm\">\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>First Name</th>\n          <th>Last Name</th>\n          <th>Username</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr onClick={() => console.log('click on the request')}>\n          <td>1</td>\n          <td>Mark</td>\n          <td>Otto</td>\n          <td>@mdo</td>\n        </tr>\n        <tr>\n          <td>2</td>\n          <td>Jacob</td>\n          <td>Thornton</td>\n          <td>@fat</td>\n        </tr>\n        <tr>\n          <td>3</td>\n          <td>Larry the Bird</td>\n          <td>Larry the Bird 2</td>\n          <td>@twitter</td>\n        </tr>\n      </tbody>\n    </Table>\n  </React.Fragment>\n);\n\nexport default RequestTableList;\n","import React from 'react';\n\nimport CreateRequests from './create-requests/CreateRequests';\nimport RequestTableList from './request-table-list/RequestTableList';\n\nconst MyRequests = () => (\n  <div>\n    <CreateRequests />\n    <RequestTableList />\n  </div>\n);\n\nexport default MyRequests;\n","import _ from 'lodash';\nimport Home from '../home/Home';\nimport GetHelp from '../get-help/GetHelp';\nimport Volunteer from '../volunteer/Volunteer';\nimport MyRequests from '../manage-requests/manage-request-page/ManageRequests';\nimport CreateRequestPage from '../manage-requests/create-request-page/CreateRequestPage';\n\nconst PUBLIC_NAV_STATE = {\n  'get-help': GetHelp,\n  home: Home,\n  volunteer: Volunteer,\n};\n\n// TODO: handle full nav state here\nconst PROTECTED_NAV_STATE = {\n  'create-request': CreateRequestPage,\n};\n\nexport function getDisplayComponentForNav(state, { navId, subNavId }) {\n  const navState = _.defaultTo(subNavId, navId);\n  if (state.auth.hasLogin) {\n    return PROTECTED_NAV_STATE[navState] || MyRequests;\n  } else {\n    return PUBLIC_NAV_STATE[navState] || Home;\n  }\n}\n","import React from 'react';\n\nconst CreateRequestPage = () => <div>This is the create request page</div>;\n\nexport default CreateRequestPage;\n","import React from 'react';\n\nimport { Route } from 'react-router-dom';\nimport { connect } from 'react-redux';\n\nimport Navbar from '../navbar/Navbar';\nimport Breadcrumbs from '../breadcrumbs/Breadcrumbs';\nimport GlobalModals from '../global-modals/GlobalModals';\nimport { withRouter } from 'react-router';\nimport * as navManager from '../navbar/nav-manager';\n\nconst AppRoot = ({ component }) => (\n  <div>\n    <GlobalModals />\n    <Navbar />\n    {/* TODO: hide breadcrumbs for protected route */}\n    <Breadcrumbs />\n    <Route path=\"/:navId?/:subNavId?\" component={component}></Route>\n  </div>\n);\n\nconst mapStateToProps = (state, props) => {\n  const params = props.match.params;\n\n  return {\n    component: navManager.getDisplayComponentForNav(state, params),\n  };\n};\n\nexport default withRouter(connect(mapStateToProps)(AppRoot));\n","const loginModalReducers = (state = {}, action) => {\n  const newState = { ...state };\n  switch (action.type) {\n    case 'OPEN_LOGIN_MODAL':\n      newState['show'] = true;\n      return newState;\n    case 'HIDE_LOGIN_MODAL':\n      newState['show'] = false;\n      return newState;\n    default:\n      return state;\n  }\n};\n\nexport default loginModalReducers;\n","const authReducers = (state = { hasLogin: false }, action) => {\n  const newState = { ...state };\n  switch (action.type) {\n    case 'SUCCESSFULLY_LOG_IN':\n      newState['hasLogin'] = true;\n      return newState;\n    default:\n      return state;\n  }\n};\n\nexport default authReducers;\n","import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport logger from 'redux-logger';\nimport globalModals from '../components/global-modals/login/login-modal.reducers';\nimport auth from '../apis/auth/auth.reducers';\n\nconst appReducers = combineReducers({\n  auth,\n  globalModals,\n});\n\nconst store = createStore(appReducers, applyMiddleware(logger));\nexport default store;\n","import React from 'react';\n\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport AppRoot from './components/root/AppRoot';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport store from './store';\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <Router>\n        <Route path=\"/:navId?/:subNavId?\" component={AppRoot}></Route>\n      </Router>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}